[{"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\index.js":"1","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\App.js":"2","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\FilesViewer.js":"3","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\Icons.js":"4","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterStatus.js":"5","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_All_Users.js":"6","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Login\\Login.js":"7","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_Single_User.js":"8","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\components\\Menu\\Menu.js":"9","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterReservation.js":"10","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\routes.js":"11"},{"size":262,"mtime":1642609037861,"results":"12","hashOfConfig":"13"},{"size":1516,"mtime":1642803571523,"results":"14","hashOfConfig":"13"},{"size":780,"mtime":1642609037828,"results":"15","hashOfConfig":"13"},{"size":1242,"mtime":1642609037838,"results":"16","hashOfConfig":"13"},{"size":1342,"mtime":1642097015545,"results":"17","hashOfConfig":"13"},{"size":6418,"mtime":1642107354502,"results":"18","hashOfConfig":"13"},{"size":1774,"mtime":1642786758919,"results":"19","hashOfConfig":"13"},{"size":6451,"mtime":1642803539770,"results":"20","hashOfConfig":"13"},{"size":3177,"mtime":1642803545679,"results":"21","hashOfConfig":"13"},{"size":7913,"mtime":1642804095725,"results":"22","hashOfConfig":"13"},{"size":384,"mtime":1642616224093,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"j2yri4",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\index.js",[],["52","53"],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\App.js",["54","55","56"],"import React, {useState} from 'react';\r\nimport Menu from \"./components/Menu/Menu\";\r\nimport Reservierungen_All_Users from \"./views/Reservierungen_All_Users\";\r\nimport Reservierungen_Single_User from \"./views/Reservierungen_Single_User\";\r\nimport ScooterStatus from \"./views/ScooterStatus\";\r\nimport ScooterReservation from \"./views/ScooterReservation\";\r\nimport Login from \"./views/Login/Login\";\r\n\r\nimport {BrowserRouter, Route, Switch, Redirect} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n\r\n    function updateState(bool, userName, userId){\r\n        localStorage.setItem('showWebsite', bool);\r\n        localStorage.setItem('userName', userName);\r\n        localStorage.setItem('userId', userId);\r\n        window.location.reload()\r\n    }\r\n    function logout() {\r\n        localStorage.setItem('showWebsite', '');\r\n        localStorage.setItem('userName', '');\r\n        localStorage.setItem('userId', '');\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        localStorage.getItem('showWebsite') === 'true' ?\r\n            <BrowserRouter>\r\n            <Menu userName={localStorage.getItem('userName')} logout={logout}/>\r\n            <Switch>\r\n                <Route path='/reservierungshistorie' component={Reservierungen_Single_User}/>\r\n                <Route path='/scooterStatus' component={ScooterStatus}/>\r\n                <Route path='/' component={ScooterReservation}/>\r\n            </Switch>\r\n        </BrowserRouter>\r\n            : <Login updateState={updateState}/>\r\n    );\r\n}\r\nexport default App;\r\n","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\FilesViewer.js",[],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\Icons.js",[],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterStatus.js",["57"],"\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ScooterStatus extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            countFreeScooter: 0,\r\n            scooters: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost/BUSINESSSW/getScooterStatus.php')\r\n            .then(response => {\r\n                this.scooters = response.data;\r\n                let element =0\r\n                for (let index = 0; index < this.scooters.length; index++) {\r\n                    if(this.scooters[index].RESERVATION_STATUS==\"Frei\"){\r\n                        element++;\r\n                        this.setState({\r\n                            countFreeScooter: element\r\n                        });\r\n                    }           \r\n                }\r\n\r\n            });\r\n            \r\n            ;\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const { countFreeScooter } = this.state;\r\n        return (\r\n            <div className=\"card text-center m-3\">\r\n                <h5 className=\"card-header\">Verfügbarkeit prüfen</h5>\r\n                <div className=\"card-body\">\r\n                    Anzahl verfügbarer Scooter: {countFreeScooter}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ScooterStatus }; ","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_All_Users.js",["58","59","60","61","62","63"],"import React, {Component} from \"react\";\r\nimport styled from 'styled-components';\r\nimport axios from \"axios\";\r\nimport url from \"url\";\r\n\r\n\r\nimport {Button} from 'react-bootstrap';\r\nimport {Container, Row, Col, Table} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst ContentContainer = styled.div`\r\n\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n    margin: 25px 0px 0px 8px;\r\n`;\r\n\r\nconst BigHeader = styled.div`\r\n    margin: 26px 0px 0px 12px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display:inline-block;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    z-index: -1;\r\n    border: solid lightgrey 0.5px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 32px 16px 0px 16px;\r\n    margin: 20px 0px 0px 0px;\r\n    display: \"inline-block\"\r\n    :hover {\r\n        box-shadow: 0 2px 10px 0 rgba(0, 0, 0, .2);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst RefreshButtonContainer = styled.div`\r\n    margin: 0px 0px 0px 24px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display: inline-block;\r\n`;\r\n\r\nconst TrCustom = styled.tr`\r\n   :hover{\r\n     cursor:pointer;\r\n   }\r\n`;\r\n\r\nclass Reservierungen_All_Users extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            reservations: [],\r\n            userInput: \"\",\r\n            amountToDisplay: 10,\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"rgba(203,203,210,.15)\"\r\n        this.getReservations()\r\n    }\r\n\r\n    getReservations() {\r\n        axios.get('http://localhost/BUSINESSSW/reservationOverview.php')\r\n            .then(response => response.data)\r\n            .then(data => {\r\n                this.setState({reservations: data})\r\n            });\r\n    }\r\n\r\n    getTimeStamp() {\r\n        let today = new Date();\r\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        let dateTime = date + ' ' + time;\r\n        return dateTime\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContentContainer className=\"content\">\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col sm>\r\n                            <BigHeader>(Admin) Reservierungen aller Nutzer anzeigen</BigHeader>\r\n                            <RefreshButtonContainer>\r\n                                <Button style={{paddingLeft: \"14px\", paddingRight: \"46px\"}} onClick={() => window.location.reload()}>Neu laden</Button>\r\n                            </RefreshButtonContainer>\r\n                            <a style={{marginLeft: \"22px\", fontWeight: 300}}>Letzter Check: {this.getTimeStamp()}</a>\r\n                        </Col>\r\n                        <Col>\r\n                            <div class=\"float-right\">\r\n                                <form>\r\n                                    <a>Zeige </a>\r\n                                    <input\r\n                                        type='number'\r\n                                        onChange={(event) => this.setState({amountToDisplay: event.target.value})}\r\n                                    />\r\n                                    <a> Reservierungen von insgesamt <b>{this.state.reservations.length}</b></a>\r\n                                </form>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <CardContainer>\r\n                        <Table striped hover>\r\n                            <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Reservierungs-ID</th>\r\n                                <th>User-ID</th>\r\n                                <th>Scooter-ID</th>\r\n                                <th>Start-Datum</th>\r\n                                <th>End-Datum</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.reservations.length !== 0 ?\r\n                                this.state.reservations.map((reservation, i) => i < this.state.amountToDisplay ?\r\n\r\n                                    <tr>\r\n                                        <>\r\n                                            <td><b>({i + 1})</b></td>\r\n                                            <td>{reservation.RESERVATION_ID}</td>\r\n                                            <td>{reservation.USER_ID}</td>\r\n                                            <td>{reservation.SCOOTER_ID}</td>\r\n                                            <td>{reservation.STARTDATE}</td>\r\n                                            {\r\n                                                new Date(reservation.ENDDATE) < new Date() ?\r\n                                                    <>\r\n                                                        <td>({reservation.STARTDATE})</td>\r\n                                                        <b style={{color: \"green\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            abgelaufen</b></>\r\n                                                    : <>\r\n                                                        <td>({reservation.ENDDATE})</td>\r\n                                                        <b style={{color: \"red\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            aktiv</b></>\r\n                                            }                                        </>\r\n                                    </tr>\r\n                                    : null\r\n                                ) :\r\n                                <div style={{fontStyle: \"italic\"}}><br/>Es gibt noch keine Reservierungen. Gut für dich!\r\n                                </div>\r\n\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </CardContainer>\r\n                </Container>\r\n            </ContentContainer>\r\n        );\r\n    }\r\n}\r\n\r\nReservierungen_All_Users.propTypes = {\r\n    RESERVATION_ID: PropTypes.string,\r\n    USER_ID: PropTypes.string,\r\n    SCOOTER_ID: PropTypes.string,\r\n    STARTDATE: PropTypes.string,\r\n    ENDDATE: PropTypes.string,\r\n\r\n};\r\nexport default Reservierungen_All_Users;","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Login\\Login.js",["64","65"],"import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport './login.css';\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            password: \"\"\r\n        }\r\n        this.handleClickLogin = this.handleClickLogin.bind(this);\r\n    }\r\n\r\n    handleClickLogin = () => {\r\n\r\n        const name = document.getElementById(\"name\").value;\r\n        const password = document.getElementById(\"password\").value;\r\n\r\n            axios.post('http://localhost/BUSINESSSW/login.php', {\r\n                \"name\": name,\r\n                \"password\": password\r\n            \r\n            })\r\n            .then(response => response.data)\r\n            .then(data => {\r\n                if (data.ok.length >0) {\r\n                    console.log(\"Name \"+data.ok[0].NAME)\r\n                    this.props.updateState(true, name, data.ok[0].USER_ID)\r\n\r\n                } else {\r\n                    new Notification(\"Login fehlgeschlagen\", { body: \"Zu dem Usernamen und Passwort ist kein registrierter Benutzer hinterlegt!\" })\r\n                }\r\n            });\r\n         \r\n            \r\n            ;\r\n\r\n\r\n        }\r\n    render() {\r\n        const { name, password } = this.state;\r\n            return(\r\n                <div className='div-login'>\r\n                    <h1>Anmelden</h1>\r\n                    <div>\r\n                            <input type='text' id='name' name='name' placeholder='name...'/>\r\n                            <input type='password' id='password' name='password' placeholder='password...'/>\r\n                            <button onClick={this.handleClickLogin}>Log In</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_Single_User.js",["66","67","68","69","70","71"],"import React, {Component} from \"react\";\r\nimport styled from 'styled-components';\r\nimport axios from \"axios\";\r\nimport url from \"url\";\r\n\r\n\r\nimport {Button} from 'react-bootstrap';\r\nimport {Container, Row, Col, Table} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst ContentContainer = styled.div`\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n    margin: 25px 0px 0px 8px;\r\n`;\r\n\r\nconst BigHeader = styled.div`\r\n    margin: 26px 0px 0px 12px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display:inline-block;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    z-index: -1;\r\n    border: solid lightgrey 0.5px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 32px 16px 0px 16px;\r\n    margin: 20px 0px 0px 0px;\r\n    display: \"inline-block\"\r\n    :hover {\r\n        box-shadow: 0 2px 10px 0 rgba(0, 0, 0, .2);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst RefreshButtonContainer = styled.div`\r\n    margin: 0px 0px 0px 24px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display: inline-block;\r\n`;\r\n\r\nconst TrCustom = styled.tr`\r\n   :hover{\r\n     cursor:pointer;\r\n   }\r\n`;\r\n\r\n\r\nclass Reservierungen_Single_User extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            reservations: [],\r\n            userInput: \"\",\r\n            amountToDisplay: 10,\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"rgba(203,203,210,.15)\"\r\n        this.getReservations(localStorage.getItem('userId'))\r\n    }\r\n\r\n    getReservations(userId) {\r\n        axios.post('http://localhost/BUSINESSSW/reservationoverviewbyperson.php', {\"id\": userId})\r\n            .then(response => response.data)\r\n            .then(data => {\r\n                this.setState({reservations: data})\r\n            });\r\n    }\r\n\r\n    getTimeStamp() {\r\n        let today = new Date();\r\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        let dateTime = date + ' ' + time;\r\n        return dateTime\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContentContainer className=\"content\">\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col sm>\r\n                            <BigHeader>Reservierungen anzeigen</BigHeader>\r\n                            <RefreshButtonContainer>\r\n                                <Button style={{paddingLeft: \"14px\", paddingRight: \"46px\"}} onClick={() => window.location.reload()()}>Neu laden</Button>\r\n                            </RefreshButtonContainer>\r\n                            <a style={{marginLeft: \"10px\", fontWeight: 300}}>Letzter Check: {this.getTimeStamp()}</a>\r\n                        </Col>\r\n                        <Col>\r\n                            <div class=\"float-right\">\r\n                                <form>\r\n                                    <a>Zeige </a>\r\n                                    <input\r\n                                        type='number'\r\n                                        onChange={(event) => this.setState({amountToDisplay: event.target.value})}\r\n                                    />\r\n                                    <a> Reservierungen von insgesamt <b>{this.state.reservations.length}</b></a>\r\n                                </form>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <CardContainer>\r\n                        <Table striped hover>\r\n                            <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Reservierungs-ID</th>\r\n                                <th>User-ID</th>\r\n                                <th>Scooter-ID</th>\r\n                                <th>Start-Datum</th>\r\n                                <th>End-Datum</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.reservations.length !== 0 ?\r\n                                this.state.reservations.map((reservation, i) => i < this.state.amountToDisplay ?\r\n\r\n                                    <tr>\r\n                                        <>\r\n                                            <td><b>({i + 1})</b></td>\r\n                                            <td>{reservation.RESERVATION_ID}</td>\r\n                                            <td>{reservation.USER_ID}</td>\r\n                                            <td>{reservation.SCOOTER_ID}</td>\r\n                                            <td>{reservation.STARTDATE}</td>\r\n                                            {\r\n                                                new Date(reservation.ENDDATE) < new Date() ?\r\n                                                    <>\r\n                                                        <td>({reservation.STARTDATE})</td>\r\n                                                        <b style={{color: \"green\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            abgelaufen</b></>\r\n                                                    : <>\r\n                                                        <td>({reservation.ENDDATE})</td>\r\n                                                        <b style={{color: \"red\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            aktiv</b></>\r\n                                            }                                        </>\r\n                                    </tr>\r\n                                    : null\r\n                                ) :\r\n                                <div style={{fontStyle: \"italic\"}}><br/>Es gibt noch keine Reservierungen.\r\n                                </div>\r\n\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </CardContainer>\r\n                </Container>\r\n            </ContentContainer>\r\n        );\r\n    }\r\n}\r\n\r\nReservierungen_Single_User.propTypes = {\r\n    RESERVATION_ID: PropTypes.string,\r\n    USER_ID: PropTypes.string,\r\n    SCOOTER_ID: PropTypes.string,\r\n    STARTDATE: PropTypes.string,\r\n    ENDDATE: PropTypes.string,\r\n\r\n};\r\nexport default Reservierungen_Single_User;","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\components\\Menu\\Menu.js",[],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterReservation.js",["72","73","74"],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\routes.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":16,"nodeType":"81","messageId":"82","endLine":1,"endColumn":24},{"ruleId":"79","severity":1,"message":"83","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":32},{"ruleId":"79","severity":1,"message":"84","line":9,"column":39,"nodeType":"81","messageId":"82","endLine":9,"endColumn":47},{"ruleId":"85","severity":1,"message":"86","line":21,"column":63,"nodeType":"87","messageId":"88","endLine":21,"endColumn":65},{"ruleId":"79","severity":1,"message":"89","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":11},{"ruleId":"79","severity":1,"message":"90","line":28,"column":7,"nodeType":"81","messageId":"82","endLine":28,"endColumn":21},{"ruleId":"79","severity":1,"message":"91","line":49,"column":7,"nodeType":"81","messageId":"82","endLine":49,"endColumn":15},{"ruleId":"92","severity":1,"message":"93","line":99,"column":29,"nodeType":"94","endLine":99,"endColumn":78},{"ruleId":"92","severity":1,"message":"93","line":104,"column":37,"nodeType":"94","endLine":104,"endColumn":40},{"ruleId":"92","severity":1,"message":"93","line":109,"column":37,"nodeType":"94","endLine":109,"endColumn":40},{"ruleId":"79","severity":1,"message":"95","line":43,"column":17,"nodeType":"81","messageId":"82","endLine":43,"endColumn":21},{"ruleId":"79","severity":1,"message":"96","line":43,"column":23,"nodeType":"81","messageId":"82","endLine":43,"endColumn":31},{"ruleId":"79","severity":1,"message":"89","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":11},{"ruleId":"79","severity":1,"message":"90","line":27,"column":7,"nodeType":"81","messageId":"82","endLine":27,"endColumn":21},{"ruleId":"79","severity":1,"message":"91","line":48,"column":7,"nodeType":"81","messageId":"82","endLine":48,"endColumn":15},{"ruleId":"92","severity":1,"message":"93","line":99,"column":29,"nodeType":"94","endLine":99,"endColumn":78},{"ruleId":"92","severity":1,"message":"93","line":104,"column":37,"nodeType":"94","endLine":104,"endColumn":40},{"ruleId":"92","severity":1,"message":"93","line":109,"column":37,"nodeType":"94","endLine":109,"endColumn":40},{"ruleId":"79","severity":1,"message":"97","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":70,"column":52,"nodeType":"87","messageId":"88","endLine":70,"endColumn":54},{"ruleId":"85","severity":1,"message":"98","line":160,"column":35,"nodeType":"87","messageId":"88","endLine":160,"endColumn":37},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Reservierungen_All_Users' is defined but never used.","'Redirect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'url' is defined but never used.","'InputContainer' is assigned a value but never used.","'TrCustom' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'name' is assigned a value but never used.","'password' is assigned a value but never used.","'styled' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]