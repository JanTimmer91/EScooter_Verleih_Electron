[{"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\index.js":"1","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\App.js":"2","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\FilesViewer.js":"3","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\Icons.js":"4","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterStatus.js":"5","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_All_Users.js":"6","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Login\\Login.js":"7","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_Single_User.js":"8","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\components\\Menu\\Menu.js":"9","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterReservation.js":"10","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\routes.js":"11","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\RoutingElectron.js":"12"},{"size":262,"mtime":1642609037861,"results":"13","hashOfConfig":"14"},{"size":1989,"mtime":1642879202531,"results":"15","hashOfConfig":"14"},{"size":780,"mtime":1642609037828,"results":"16","hashOfConfig":"14"},{"size":1242,"mtime":1642609037838,"results":"17","hashOfConfig":"14"},{"size":1342,"mtime":1642097015545,"results":"18","hashOfConfig":"14"},{"size":6418,"mtime":1642107354502,"results":"19","hashOfConfig":"14"},{"size":1768,"mtime":1642874965013,"results":"20","hashOfConfig":"14"},{"size":6222,"mtime":1642878725961,"results":"21","hashOfConfig":"14"},{"size":1237,"mtime":1642869669117,"results":"22","hashOfConfig":"14"},{"size":7984,"mtime":1642869669122,"results":"23","hashOfConfig":"14"},{"size":481,"mtime":1642879202523,"results":"24","hashOfConfig":"14"},{"size":334,"mtime":1642869669120,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"j2yri4",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\index.js",[],["57","58"],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\App.js",["59","60","61"],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\FilesViewer.js",[],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\Icons.js",[],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterStatus.js",["62"],"\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ScooterStatus extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            countFreeScooter: 0,\r\n            scooters: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost/BUSINESSSW/getScooterStatus.php')\r\n            .then(response => {\r\n                this.scooters = response.data;\r\n                let element =0\r\n                for (let index = 0; index < this.scooters.length; index++) {\r\n                    if(this.scooters[index].RESERVATION_STATUS==\"Frei\"){\r\n                        element++;\r\n                        this.setState({\r\n                            countFreeScooter: element\r\n                        });\r\n                    }           \r\n                }\r\n\r\n            });\r\n            \r\n            ;\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const { countFreeScooter } = this.state;\r\n        return (\r\n            <div className=\"card text-center m-3\">\r\n                <h5 className=\"card-header\">Verfügbarkeit prüfen</h5>\r\n                <div className=\"card-body\">\r\n                    Anzahl verfügbarer Scooter: {countFreeScooter}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ScooterStatus }; ","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_All_Users.js",["63","64","65","66","67","68"],"import React, {Component} from \"react\";\r\nimport styled from 'styled-components';\r\nimport axios from \"axios\";\r\nimport url from \"url\";\r\n\r\n\r\nimport {Button} from 'react-bootstrap';\r\nimport {Container, Row, Col, Table} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst ContentContainer = styled.div`\r\n\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n    margin: 25px 0px 0px 8px;\r\n`;\r\n\r\nconst BigHeader = styled.div`\r\n    margin: 26px 0px 0px 12px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display:inline-block;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    z-index: -1;\r\n    border: solid lightgrey 0.5px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 32px 16px 0px 16px;\r\n    margin: 20px 0px 0px 0px;\r\n    display: \"inline-block\"\r\n    :hover {\r\n        box-shadow: 0 2px 10px 0 rgba(0, 0, 0, .2);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst RefreshButtonContainer = styled.div`\r\n    margin: 0px 0px 0px 24px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display: inline-block;\r\n`;\r\n\r\nconst TrCustom = styled.tr`\r\n   :hover{\r\n     cursor:pointer;\r\n   }\r\n`;\r\n\r\nclass Reservierungen_All_Users extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            reservations: [],\r\n            userInput: \"\",\r\n            amountToDisplay: 10,\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"rgba(203,203,210,.15)\"\r\n        this.getReservations()\r\n    }\r\n\r\n    getReservations() {\r\n        axios.get('http://localhost/BUSINESSSW/reservationOverview.php')\r\n            .then(response => response.data)\r\n            .then(data => {\r\n                this.setState({reservations: data})\r\n            });\r\n    }\r\n\r\n    getTimeStamp() {\r\n        let today = new Date();\r\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        let dateTime = date + ' ' + time;\r\n        return dateTime\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContentContainer className=\"content\">\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col sm>\r\n                            <BigHeader>(Admin) Reservierungen aller Nutzer anzeigen</BigHeader>\r\n                            <RefreshButtonContainer>\r\n                                <Button style={{paddingLeft: \"14px\", paddingRight: \"46px\"}} onClick={() => window.location.reload()}>Neu laden</Button>\r\n                            </RefreshButtonContainer>\r\n                            <a style={{marginLeft: \"22px\", fontWeight: 300}}>Letzter Check: {this.getTimeStamp()}</a>\r\n                        </Col>\r\n                        <Col>\r\n                            <div class=\"float-right\">\r\n                                <form>\r\n                                    <a>Zeige </a>\r\n                                    <input\r\n                                        type='number'\r\n                                        onChange={(event) => this.setState({amountToDisplay: event.target.value})}\r\n                                    />\r\n                                    <a> Reservierungen von insgesamt <b>{this.state.reservations.length}</b></a>\r\n                                </form>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <CardContainer>\r\n                        <Table striped hover>\r\n                            <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Reservierungs-ID</th>\r\n                                <th>User-ID</th>\r\n                                <th>Scooter-ID</th>\r\n                                <th>Start-Datum</th>\r\n                                <th>End-Datum</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.reservations.length !== 0 ?\r\n                                this.state.reservations.map((reservation, i) => i < this.state.amountToDisplay ?\r\n\r\n                                    <tr>\r\n                                        <>\r\n                                            <td><b>({i + 1})</b></td>\r\n                                            <td>{reservation.RESERVATION_ID}</td>\r\n                                            <td>{reservation.USER_ID}</td>\r\n                                            <td>{reservation.SCOOTER_ID}</td>\r\n                                            <td>{reservation.STARTDATE}</td>\r\n                                            {\r\n                                                new Date(reservation.ENDDATE) < new Date() ?\r\n                                                    <>\r\n                                                        <td>({reservation.STARTDATE})</td>\r\n                                                        <b style={{color: \"green\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            abgelaufen</b></>\r\n                                                    : <>\r\n                                                        <td>({reservation.ENDDATE})</td>\r\n                                                        <b style={{color: \"red\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            aktiv</b></>\r\n                                            }                                        </>\r\n                                    </tr>\r\n                                    : null\r\n                                ) :\r\n                                <div style={{fontStyle: \"italic\"}}><br/>Es gibt noch keine Reservierungen. Gut für dich!\r\n                                </div>\r\n\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </CardContainer>\r\n                </Container>\r\n            </ContentContainer>\r\n        );\r\n    }\r\n}\r\n\r\nReservierungen_All_Users.propTypes = {\r\n    RESERVATION_ID: PropTypes.string,\r\n    USER_ID: PropTypes.string,\r\n    SCOOTER_ID: PropTypes.string,\r\n    STARTDATE: PropTypes.string,\r\n    ENDDATE: PropTypes.string,\r\n\r\n};\r\nexport default Reservierungen_All_Users;","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Login\\Login.js",["69","70"],"import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport './login.css';\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            password: \"\"\r\n        }\r\n        this.handleClickLogin = this.handleClickLogin.bind(this);\r\n    }\r\n\r\n    handleClickLogin = () => {\r\n\r\n        const name = document.getElementById(\"name\").value;\r\n        const password = document.getElementById(\"password\").value;\r\n\r\n            axios.post('http://localhost/BUSINESSSW/login.php', {\r\n                \"name\": name,\r\n                \"password\": password\r\n            \r\n            })\r\n            .then(response => response.data)\r\n            .then(data => {\r\n                if (data.ok.length >0) {\r\n                    console.log(\"Name \"+data.ok[0].NAME)\r\n                    this.props.login(true, name, data.ok[0].USER_ID)\r\n\r\n                } else {\r\n                    new Notification(\"Login fehlgeschlagen\", { body: \"Zu dem Usernamen und Passwort ist kein registrierter Benutzer hinterlegt!\" })\r\n                }\r\n            });\r\n         \r\n            \r\n            ;\r\n\r\n\r\n        }\r\n    render() {\r\n        const { name, password } = this.state;\r\n            return(\r\n                <div className='div-login'>\r\n                    <h1>Anmelden</h1>\r\n                    <div>\r\n                            <input type='text' id='name' name='name' placeholder='name...'/>\r\n                            <input type='password' id='password' name='password' placeholder='password...'/>\r\n                            <button onClick={this.handleClickLogin}>Log In</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\Reservierungen_Single_User.js",["71","72","73","74","75","76","77","78"],"import React, {Component} from \"react\";\r\nimport styled from 'styled-components';\r\nimport axios from \"axios\";\r\nimport url from \"url\";\r\n\r\n\r\nimport {Button} from 'react-bootstrap';\r\nimport {Container, Row, Col, Table} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst ContentContainer = styled.div`\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n    margin: 25px 0px 0px 8px;\r\n`;\r\n\r\nconst BigHeader = styled.div`\r\n    margin: 26px 0px 0px 12px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display:inline-block;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    z-index: -1;\r\n    border: solid lightgrey 0.5px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 32px 16px 0px 16px;\r\n    margin: 20px 0px 0px 0px;\r\n    display: \"inline-block\"\r\n    :hover {\r\n        box-shadow: 0 2px 10px 0 rgba(0, 0, 0, .2);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst RefreshButtonContainer = styled.div`\r\n    margin: 0px 0px 0px 24px;\r\n    font-weight: 300;\r\n    font-size: 22px;\r\n    display: inline-block;\r\n`;\r\n\r\nconst TrCustom = styled.tr`\r\n   :hover{\r\n     cursor:pointer;\r\n   }\r\n`;\r\n\r\n\r\nclass Reservierungen_Single_User extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            reservations: [],\r\n            userInput: \"\",\r\n            amountToDisplay: 10,\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"rgba(203,203,210,.15)\"\r\n        this.getReservations(localStorage.getItem('userId'))\r\n    }\r\n\r\n    getReservations(userId) {\r\n        axios.post('http://localhost/BUSINESSSW/reservationoverviewbyperson.php', {\"id\": userId})\r\n            .then(response => response.data)\r\n            .then(data => {\r\n                this.setState({reservations: data})\r\n            });\r\n    }\r\n\r\n    getTimeStamp() {\r\n        let today = new Date();\r\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        let dateTime = date + ' ' + time;\r\n        return dateTime\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContentContainer className=\"content\">\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col sm>\r\n                            <BigHeader>Reservierungen anzeigen</BigHeader>\r\n                            <br/>\r\n                            <a style={{marginLeft: \"14px\", fontWeight: 300}}>Letzter Check: {this.getTimeStamp()}</a>\r\n                        </Col>\r\n                        <Col>\r\n                            <div class=\"float-right\">\r\n                                <form>\r\n                                    <a>Zeige </a>\r\n                                    <input\r\n                                        type='number'\r\n                                        onChange={(event) => this.setState({amountToDisplay: event.target.value})}\r\n                                    />\r\n                                    <a> Reservierungen von insgesamt <b>{this.state.reservations.length}</b></a>\r\n                                </form>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <CardContainer>\r\n                        <Table striped hover>\r\n                            <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Reservierungs-ID</th>\r\n                                <th>User-ID</th>\r\n                                <th>Scooter-ID</th>\r\n                                <th>Start-Datum</th>\r\n                                <th>End-Datum</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.reservations.length !== 0 ?\r\n                                this.state.reservations.map((reservation, i) => i < this.state.amountToDisplay ?\r\n\r\n                                    <tr>\r\n                                        <>\r\n                                            <td><b>({i + 1})</b></td>\r\n                                            <td>{reservation.RESERVATION_ID}</td>\r\n                                            <td>{reservation.USER_ID}</td>\r\n                                            <td>{reservation.SCOOTER_ID}</td>\r\n                                            <td>{reservation.STARTDATE}</td>\r\n                                            {\r\n                                                new Date(reservation.ENDDATE) < new Date() ?\r\n                                                    <>\r\n                                                        <td>({reservation.STARTDATE})</td>\r\n                                                        <b style={{color: \"green\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            abgelaufen</b></>\r\n                                                    : <>\r\n                                                        <td>({reservation.ENDDATE})</td>\r\n                                                        <b style={{color: \"red\", fontWeight: \"bold\"}}>Reservierung\r\n                                                            aktiv</b></>\r\n                                            }                                        </>\r\n                                    </tr>\r\n                                    : null\r\n                                ) :\r\n                                <div style={{fontStyle: \"italic\"}}><br/>Es gibt noch keine Reservierungen.\r\n                                </div>\r\n\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </CardContainer>\r\n                </Container>\r\n            </ContentContainer>\r\n        );\r\n    }\r\n}\r\n\r\nReservierungen_Single_User.propTypes = {\r\n    RESERVATION_ID: PropTypes.string,\r\n    USER_ID: PropTypes.string,\r\n    SCOOTER_ID: PropTypes.string,\r\n    STARTDATE: PropTypes.string,\r\n    ENDDATE: PropTypes.string,\r\n\r\n};\r\nexport default Reservierungen_Single_User;","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\components\\Menu\\Menu.js",["79","80"],"import React, {Component} from \"react\";\r\nimport styled from 'styled-components';\r\nimport {routes} from \"../../routes\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nconst NavTop = styled.div`\r\n    background-color: white;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 0px 10px 10px;\r\n`;\r\n\r\nconst PageTitle = styled.div`\r\n    display: inline-block;\r\n    font-weight: 500;\r\n    font-size: 22px;\r\n`;\r\n\r\n\r\n\r\n\r\nclass Menu extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showMenu: false,\r\n            navbarTitle: 'Menu',\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <NavTop>\r\n                <div>\r\n                    <PageTitle>HFU E-Scooter leihen</PageTitle>\r\n                    <p style={{margin: \"0px\"}}>Willkommen, {localStorage.getItem('userName')}!</p>\r\n                </div>\r\n                <div>\r\n                    <Button style={{marginBottom: \"5px\", marginTop: \"5px\", width: \"130px\"}} onClick={() => this.props.logout()}>Logout</Button>\r\n                </div>\r\n            </NavTop>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\ScooterReservation.js",["81","82","83"],"import React, {Component} from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nimport escooterimg_sw from '../assets/escooter_sw.jpg';\r\nimport escooterimg from '../assets/escooter.jpg';\r\nimport './ScooterReservation.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from \"axios\";\r\n\r\n//const ContentContainer = styled.div`\r\n\r\n//`;\r\n\r\nclass ScooterReservation extends Component {\r\n\r\n    scooters = {};\r\n\r\n    goBackCallbackFunction = () => {this.handleClickScooterRentalBack();};\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            scooterAvailable: false,\r\n            availableScooterId: -1,\r\n            activeReservationId: -1,\r\n            reservedScooterId: -1,\r\n            activePage: \"\"\r\n        };\r\n\r\n        this.handleRentScooter = this.handleRentScooter.bind(this);\r\n        this.handleReturnScooter = this.handleReturnScooter.bind(this);\r\n        this.handleReload = this.handleReload.bind(this);\r\n    }\r\n\r\n    getActiveScooterRental() {\r\n        // Check if there is an open reservation\r\n\r\n        axios.post('http://localhost/BUSINESSSW/reservationoverviewbypersonempty.php', {id: localStorage.getItem('userId')})\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    this.setState({\r\n                        activeReservationId: response.data[0].RESERVATION_ID,\r\n                        reservedScooterId: response.data[0].SCOOTER_ID\r\n                    });\r\n                    this.showReturnScooterScreen();\r\n                } else {\r\n                    this.setState({\r\n                        activeReservationId: -1,\r\n                        reservedScooterId: -1\r\n                    });\r\n                    this.scooterAvailable();\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    scooterAvailable() {\r\n        // Chech if there is an available scooter\r\n\r\n        axios.get('http://localhost/BUSINESSSW/getScooterStatus.php')\r\n            .then(response => {\r\n                this.scooters = response.data;\r\n                this.setState({\r\n                    scooterAvailable: false,\r\n                    availableScooterId: -1\r\n                });\r\n                this.scooters.forEach((scooter) => {\r\n                    if (scooter.RESERVATION_STATUS == \"Frei\") {\r\n                        this.setState({\r\n                            scooterAvailable: true,\r\n                            availableScooterId: parseInt(scooter.SCOOTER_ID)\r\n                        });\r\n\r\n                    }\r\n                });\r\n                if (this.state.scooterAvailable) {\r\n                    this.showRentScooterScreen();\r\n                } else {\r\n                    this.showNoScootersAvailableScreen();\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"rgba(203,203,210,.15)\"\r\n        this.initScooterReservation();\r\n    }\r\n\r\n\r\n    initScooterReservation() {\r\n        this.getActiveScooterRental();\r\n    }\r\n\r\n\r\n\r\n    handleRentScooter() {\r\n        let post_data = {\r\n            \"scooterid\": this.state.availableScooterId,\r\n            \"userid\": localStorage.getItem('userId')\r\n        };\r\n\r\n        axios.post('http://localhost/BUSINESSSW/addReservation.php', post_data)\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                if (data.update && data.insert) {\r\n                    this.showRentScooterSuccessScreen();\r\n                } else {\r\n                    new Notification(\"Das hat nicht geklappt...\", { body: \"Der E-Scooter konnte nicht ausgeliehen werden!\" })\r\n                }\r\n            });\r\n    }\r\n\r\n    handleReturnScooter() {\r\n        let post_data = {\r\n            \"reservationid\": this.state.activeReservationId,\r\n            \"scooterid\": this.state.reservedScooterId\r\n        };\r\n\r\n        axios.post('http://localhost/BUSINESSSW/removeReservation.php', post_data)\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                if (data.Update3 && data.Update2) {\r\n                    this.showReturnScooterSuccessScreen();\r\n                } else {\r\n                    new Notification(\"Das hat nicht geklappt...\", { body: \"Die Rückgabe war nicht erfolgreich!\" })\r\n                }\r\n            });\r\n    }\r\n\r\n    handleReload() {\r\n        this.getActiveScooterRental();\r\n    }\r\n\r\n\r\n    // Functions for changing visible components\r\n\r\n    showNoScootersAvailableScreen() {\r\n        this.showScreen(\"no_scooter_page\");\r\n    }\r\n\r\n    showRentScooterScreen() {\r\n        this.showScreen(\"rent_page\");\r\n    }\r\n\r\n    showReturnScooterScreen() {\r\n        this.showScreen(\"return_page\");\r\n    }\r\n\r\n    showRentScooterSuccessScreen() {\r\n        this.showScreen(\"rent_success_page\");\r\n    }\r\n\r\n    showReturnScooterSuccessScreen() {\r\n        this.showScreen(\"return_success_page\");\r\n    }\r\n\r\n    showScreen(elementId) {\r\n        if (this.state.activePage != \"\") {\r\n            document.getElementById(this.state.activePage).classList.toggle('rotated');\r\n        }\r\n        document.getElementById(elementId).classList.toggle('rotated');\r\n        this.setState({activePage: elementId });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"container\">\r\n                <div class=\"pages-container\">\r\n                    <div class=\"pages\">\r\n                        <h1>E-Scooter leihen</h1>\r\n                        <div id=\"no_scooter_page\" class=\"page rotated\">\r\n                            <div class=\"page_content\" onClick={this.handleReload}>\r\n                                <img src={escooterimg_sw} alt=\"E-Scooter\"></img>\r\n                                <p>Zur Zeit ist leider kein E-Scooter verfügbar.</p>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"rent_page\" class=\"page rotated\">\r\n                            <div class=\"page_content\" onClick={this.handleRentScooter}>\r\n                                <img src={escooterimg} alt=\"E-Scooter\"></img>\r\n                                <p>Jetzt E-Scooter ausleihen</p>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"rent_success_page\" class=\"page rotated\">\r\n                            <div class=\"successRental\">\r\n                                <img id=\"scooterImageSuccess\" src={escooterimg_sw} alt=\"E-Scooter\"></img>\r\n                                <div class=\"text\">\r\n                                    <h3>Reservierung erfolgreich.</h3>\r\n                                    <p>Der <span class=\"highlighted\">E-Scooter Nr. {this.state.availableScooterId}</span> steht nun für Sie bereit</p>\r\n                                    <button onClick={this.handleReload}>Zurück</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"return_page\" class=\"page rotated\">\r\n                            <div class=\"page_content\" onClick={this.handleReturnScooter}>\r\n                                <img src={escooterimg_sw} alt=\"E-Scooter\"></img>\r\n                                <p>E-Scooter jetzt zurückgeben.</p>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"return_success_page\" class=\"page rotated\">\r\n                            <div class=\"page_content\">\r\n                                <img src={escooterimg_sw} alt=\"E-Scooter\"></img>\r\n                                <div class=\"text\">\r\n                                    <h3>Der E-Scooter wurde zurückgegeben.</h3>\r\n                                    <button onClick={this.handleReload}>Zurück</button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nScooterReservation.propTypes = {};\r\n\r\nexport default ScooterReservation;","C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\routes.js",[],"C:\\Users\\PC-Klinik\\Dokumente\\Software_Projects\\react-electron-main\\src\\views\\RoutingElectron.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":24},{"ruleId":"88","severity":1,"message":"92","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":32},{"ruleId":"88","severity":1,"message":"93","line":9,"column":39,"nodeType":"90","messageId":"91","endLine":9,"endColumn":47},{"ruleId":"94","severity":1,"message":"95","line":21,"column":63,"nodeType":"96","messageId":"97","endLine":21,"endColumn":65},{"ruleId":"88","severity":1,"message":"98","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":11},{"ruleId":"88","severity":1,"message":"99","line":28,"column":7,"nodeType":"90","messageId":"91","endLine":28,"endColumn":21},{"ruleId":"88","severity":1,"message":"100","line":49,"column":7,"nodeType":"90","messageId":"91","endLine":49,"endColumn":15},{"ruleId":"101","severity":1,"message":"102","line":99,"column":29,"nodeType":"103","endLine":99,"endColumn":78},{"ruleId":"101","severity":1,"message":"102","line":104,"column":37,"nodeType":"103","endLine":104,"endColumn":40},{"ruleId":"101","severity":1,"message":"102","line":109,"column":37,"nodeType":"103","endLine":109,"endColumn":40},{"ruleId":"88","severity":1,"message":"104","line":43,"column":17,"nodeType":"90","messageId":"91","endLine":43,"endColumn":21},{"ruleId":"88","severity":1,"message":"105","line":43,"column":23,"nodeType":"90","messageId":"91","endLine":43,"endColumn":31},{"ruleId":"88","severity":1,"message":"98","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":11},{"ruleId":"88","severity":1,"message":"106","line":7,"column":9,"nodeType":"90","messageId":"91","endLine":7,"endColumn":15},{"ruleId":"88","severity":1,"message":"99","line":27,"column":7,"nodeType":"90","messageId":"91","endLine":27,"endColumn":21},{"ruleId":"88","severity":1,"message":"107","line":41,"column":7,"nodeType":"90","messageId":"91","endLine":41,"endColumn":29},{"ruleId":"88","severity":1,"message":"100","line":48,"column":7,"nodeType":"90","messageId":"91","endLine":48,"endColumn":15},{"ruleId":"101","severity":1,"message":"102","line":97,"column":29,"nodeType":"103","endLine":97,"endColumn":78},{"ruleId":"101","severity":1,"message":"102","line":102,"column":37,"nodeType":"103","endLine":102,"endColumn":40},{"ruleId":"101","severity":1,"message":"102","line":107,"column":37,"nodeType":"103","endLine":107,"endColumn":40},{"ruleId":"88","severity":1,"message":"108","line":3,"column":9,"nodeType":"90","messageId":"91","endLine":3,"endColumn":15},{"ruleId":"88","severity":1,"message":"109","line":5,"column":9,"nodeType":"90","messageId":"91","endLine":5,"endColumn":13},{"ruleId":"88","severity":1,"message":"110","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"95","line":70,"column":52,"nodeType":"96","messageId":"97","endLine":70,"endColumn":54},{"ruleId":"94","severity":1,"message":"111","line":161,"column":35,"nodeType":"96","messageId":"97","endLine":161,"endColumn":37},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Reservierungen_All_Users' is defined but never used.","'Redirect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'url' is defined but never used.","'InputContainer' is assigned a value but never used.","'TrCustom' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'name' is assigned a value but never used.","'password' is assigned a value but never used.","'Button' is defined but never used.","'RefreshButtonContainer' is assigned a value but never used.","'routes' is defined but never used.","'Link' is defined but never used.","'styled' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]